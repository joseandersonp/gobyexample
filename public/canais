<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go por Exemplo: Canais</title>
    <link rel=stylesheet href="site.css">
  </head>
  <!--
  <script type="text/javascript">
    if (window.location.host == "gobyexample.com") {
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-34996217-1']);
      _gaq.push(['_trackPageview']);
      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
    }
  </script>
  -->
  <body>
    <div class="example" id="canais">
      <h2><a href="./">Go por Exemplo</a>: Canais</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p><em>Canais</em> são os vias que conectam goroutines
concorrentes. Você pode enviar valores para os
canais de uma goroutine e receber esses valores
em outra goroutine.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        <a href="http://play.golang.org/p/yVfX6jRXVxN"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Crie um novo canal com <code>make(chan tipo-valor)</code>.
Os canais são do tipo dos valores que eles
transmitem.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="nx">messages</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><em>Envie</em> um valor para um canal usando a sintaxe
<code>canal &lt;-</code>. Aqui nós enviamos <code>&quot;ping&quot;</code> para o
canal <code>messages</code> que fizemos anteriormente de
outra nova goroutine.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="nx">messages</span> <span class="o">&lt;-</span> <span class="s">&quot;ping&quot;</span> <span class="p">}()</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>A sintaxe <code>&lt;-canal</code> recebe um valor do canal.
Aqui vamos receber a mensagem <code>&quot;ping&quot;</code> que
enviamos anteriormente e apresentamos na tela.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre>    <span class="nx">msg</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">messages</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Quando executamos o programa, a mensagem <code>&quot;ping&quot;</code> é
passada com sucesso de uma goroutine para outra
através do nosso canal.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="gp">$</span> go run channels.go 
<span class="go">ping</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Por padrão, a envios e as recebimentos são bloqueadas
até que o receptor e o transmissor estejam prontos.
Esta propriedade nos permite esperar até o final do
programa pela mensagem &ldquo;ping&rdquo; sem ter que usar
qualquer outro tipo de sincronização.</p>

          </td>
          <td class="code empty">
	        
            
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Próximo exemplo: <a href="canais-com-buffer">Canais com buffer</a>.
      </p>
      
      <p class="footer">
        por José Anderson Pereira | <a href="mailto:joseandersonpereira@gmail.com">feedback</a> | <a href="https://github.com/joseandersonp/gobyexample/blob/master/examples/canais">código-fonte</a> | <a href="https://github.com/joseandersonp/gobyexample#licença">licença</a>
      </p>
    </div>
  </body>
</html>
